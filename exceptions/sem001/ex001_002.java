// 1 Реализуйте метод, принимающий в качестве аргумента целочисленный массив. 
// Если длина массива меньше некоторого заданного минимума, метод возвращает -1, в качестве кода ошибки, иначе - длину массива.

// 2 Реализуйте метод, принимающий в качестве аргумента целочисленный массив и некоторое значение. Метод ищет в массиве заданное значение и возвращает его индекс. При этом, например:
// если длина массива меньше некоторого заданного минимума, метод возвращает -1, в качестве кода ошибки.
// если искомый элемент не найден, метод вернет -2 в качестве кода ошибки.
// если вместо массива пришел null, метод вернет -3
// придумайте свои варианты исключительных ситуаций и верните соответствующие коды ошибок.
// Напишите метод, в котором реализуйте взаимодействие с пользователем. То есть, этот метод запросит искомое число у пользователя, вызовет первый, обработает возвращенное значение и покажет читаемый результат пользователю. Например, если вернулся -2, пользователю выведется сообщение: “Искомый элемент не найден”.

package exceptions.sem001;

public class ex001_002 {

  public static void main(String[] args) {
    int min = 4;
    int[] someArr = { 1, 2, 33, 4, 5, 6, 7, 8 };
    int value = 5;
    System.out.println(message(checkArr(someArr, value, min)));

  }

  public static int checkArr(int[] arr, int value, int min) {
    if (arr == null) {
      return -3;
    }
    if (arr.length < min) {
      return -1;
    }

    for (int i = 0; i < arr.length; i++) {
      if (arr[i] == value) {
        return i;
      }
    }
    return -2;
  }

  public static String message(int exeption) {
    
    String m = switch (exeption) {
        case -1 -> "Длина массива меньше  заданного минимума";
        case -2 -> "Искомый элемент не найден";
        case -3 -> "Вместо массива пришел null";
        default -> "Индекс элемента = " + exeption;
    };
    return m;
}
}
